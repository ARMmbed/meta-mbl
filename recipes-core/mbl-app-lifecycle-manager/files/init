#!/bin/sh

# Copyright (c) 2018 ARM Ltd.
#
# SPDX-License-Identifier: Apache-2.0


### BEGIN INIT INFO
# Provides:       mbl-app-manager
# Required-Start: $local_fs
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 3 4 5
# Default-Stop:  0 1 2 6
# Short-Description: Runs all containers installed in MBL_APP_DIR
# Description: Runs all containers installed in MBL_APP_DIR
### END INIT INFO

HOME_APP=__REPLACE_ME_WITH_MBL_APP_DIR__

# start all installed OCI containers in MBL_APP_DIR directory
do_start() {
    echo "Starting mbl-app-manager..." 1>&2
    echo "Looking for installed containers in $HOME_APP..." 1>&2

    #return status of the function
    do_start_status="0"

    # check all subdirectories in MBL_APP_DIR
    for dir in "$HOME_APP"/*; do

        if ! [ -d "$dir" ]; then
            # if $dir is not a directory - continue to next entry
            continue
        fi

        # OCi container should have config.json in container's root direcotry
        file=$dir/config.json
        if ! [ -f "$file" ]; then
            # if $dir has no config.json file - continue to next entry
            continue
        fi


        # valid OCI container config.json file should define "ociVersion"
        if grep -Fq "ociVersion" "$file";then

            # try running the application using MBL App Lifecycle Manager now
            # that an OCI container has been found
            app_identifier=${dir##*/}
            mbl-app-lifecycle-manager --run-container "$app_identifier" --application-id "$app_identifier" --verbose
        fi

    done

    return "$do_start_status"
}

do_stop() {
    echo "Stoppping mbl-app-manager..." 1>&2
    return "0"
}


exit_with_usage() {
    echo "Usage: mbl-app-manager {start|stop}." 1>&2
    echo "       start action will run all containers installed in __REPLACE_ME_WITH_MBL_APP_DIR__." 1>&2
    echo "       stop action does nothing for now." 1>&2
    echo "       restart, force-reload and status actions are not implemented!" 1>&2
    exit "$1"
}

case "$1" in
    start|stop)
        do_${1}
        exit $?
        ;;

    restart|force-reload|status)
        echo "The action $1 is not implemented!" 1>&2
        exit 3
        ;;

    *)
        exit_with_usage 2
        ;;
esac

# Shouldn't get here
exit 1
