From 7bdfddce6a3a2370187c1c26df764dd843e7c6fe Mon Sep 17 00:00:00 2001
From: Jonathan Haigh <jonathan.haigh@arm.com>
Date: Wed, 26 Jun 2019 10:13:46 +0100
Subject: [PATCH 5/5] Don't define 32-bit specific code if we don't need to

Some of the code in val_dispatcher.{h,c} deals with 32-bit ELF headers
and isn't suitable for 64-bit targets. GCC gives warnings/errors like
the following on 64-bit platforms:
```
./val/nspe/val_dispatcher.c: In function 'val_copy_elf':
./val/nspe/val_dispatcher.c:109:29: error: cast to pointer from integer of different size [-Werror=int-to-pointer-cast]
                             (uint8_t *)test_ph.p_paddr, test_ph.p_filesz))
                             ^
cc1: all warnings being treated as errors
```
We only actually need to define the ELF header code when
TEST_COMBINE_ARCHIVE == 0, so protect it with #ifdefs so that we can
build for 64-bit targets when TEST_COMBINE_ARCHIVE == 1.
---
 api-tests/val/nspe/val_dispatcher.c | 5 +++++
 api-tests/val/nspe/val_dispatcher.h | 6 +++++-
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/api-tests/val/nspe/val_dispatcher.c b/api-tests/val/nspe/val_dispatcher.c
index 8675518..d457f9a 100644
--- a/api-tests/val/nspe/val_dispatcher.c
+++ b/api-tests/val/nspe/val_dispatcher.c
@@ -26,6 +26,8 @@ extern psa_api_t psa_api;
 
 /* gloabls */
 addr_t          g_test_info_addr;
+
+#if (TEST_COMBINE_ARCHIVE == 0)
 uint32_t        combine_test_binary_in_ram;
 addr_t          combine_test_binary_addr;
 
@@ -116,6 +118,7 @@ int val_copy_elf(uint32_t saddr, uint32_t *info_addr)
     *info_addr = test_elfh.e_entry;
     return 0;
 }
+#endif /* TEST_COMBINE_ARCHIVE */
 
 /**
     @brief        - This function reads the test ELFs from RAM or secondary storage and loads into
@@ -333,8 +336,10 @@ void val_dispatcher(test_id_t test_id_prev)
         return;
     }
 
+#if (TEST_COMBINE_ARCHIVE == 0)
     combine_test_binary_addr   = misc_desc->ns_start_addr_of_combine_test_binary;
     combine_test_binary_in_ram = misc_desc->combine_test_binary_in_ram;
+#endif /* TEST_COMBINE_ARCHIVE */
     do
     {
         status = val_get_boot_flag(&boot.state);
diff --git a/api-tests/val/nspe/val_dispatcher.h b/api-tests/val/nspe/val_dispatcher.h
index 9adc98f..f3482ab 100644
--- a/api-tests/val/nspe/val_dispatcher.h
+++ b/api-tests/val/nspe/val_dispatcher.h
@@ -20,8 +20,11 @@
 
 #include "val.h"
 
-#define ELF_IDENT                      16
 #define VAL_INVALID_TEST_ID            0xffffffff
+
+#if (TEST_COMBINE_ARCHIVE == 0)
+
+#define ELF_IDENT                      16
 #define VAL_TEST_START_MARKER          0xfaceface
 #define VAL_TEST_END_MARKER            0xc3c3c3c3
 
@@ -65,6 +68,7 @@ typedef struct {
     test_id_t test_id;
     uint32_t  elf_size;
 } test_header_t;
+#endif /* TEST_COMBINE_ARCHIVE */
 
 void val_dispatcher(test_id_t);
 #endif
-- 
2.7.4

