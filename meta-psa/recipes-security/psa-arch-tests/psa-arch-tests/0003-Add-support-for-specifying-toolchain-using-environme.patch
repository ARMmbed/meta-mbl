From cfdca2fbf365b54173bfd7a2258c7542db8b4250 Mon Sep 17 00:00:00 2001
From: Jonathan Haigh <jonathan.haigh@arm.com>
Date: Wed, 26 Jun 2019 09:09:43 +0100
Subject: [PATCH 3/5] Add support for specifying toolchain using environment
 variables

To support any GCC compatible toolchain, let the user give "ENV" to the
"--toolchain" option to indicate that the toolchain is specified by the
standard "CC", "CFLAGS", "LD", "LDFLAGS" etc. variables.

The toolchain may not support the complicated linker options required in
the test.elf target so only support the TEST_COMBINE_ARCHIVE case.
---
 api-tests/tools/makefiles/testbuild.mk |  6 ++-
 api-tests/tools/makefiles/toolchain.mk | 26 ++++++++++++-
 api-tests/tools/scripts/setup.sh       | 69 ++++++++++++++++++++++++++--------
 3 files changed, 84 insertions(+), 17 deletions(-)

diff --git a/api-tests/tools/makefiles/testbuild.mk b/api-tests/tools/makefiles/testbuild.mk
index 21c874a..95e70a7 100644
--- a/api-tests/tools/makefiles/testbuild.mk
+++ b/api-tests/tools/makefiles/testbuild.mk
@@ -72,9 +72,13 @@ test.elf:
 ifneq (${TEST_COMBINE_ARCHIVE}, 1)
 ifeq (${TOOLCHAIN}, GNUARM)
 	$(LD) -Xlinker -Map=$(SUITE_OUT)/$(TEST)/test.map -o $(SUITE_OUT)/$(TEST)/test.elf -T$(SUITE_OUT)/.test.linker $(SUITE_OUT)/$(TEST)/*_nspe.o
-else
+else ifeq(${TOOLCHAIN}, ARMCLANG)
 	$(LD)  --scatter=$(SUITE_OUT)/.test.sct  --list=$(SUITE_OUT)/$(TEST)/test.map -o $(SUITE_OUT)/$(TEST)/test.elf  $(SUITE_OUT)/$(TEST)/*_nspe.o
+else
+$(error creating test.elf is not supported with the ${TOOLCHAIN} toolchain. Set TEST_COMBINE_ARCHIVE=1 to create a library instead)
 endif # TOOLCHAIN
+ifeq ($(HAVE_OBJDUMP),1)
 	$(DS)  $(SUITE_OUT)/$(TEST)/test.elf >  $(SUITE_OUT)/$(TEST)/test.disass
+endif # HAVE_OBJDUMP
 endif # TEST_COMBINE_ARCHIVE
 
diff --git a/api-tests/tools/makefiles/toolchain.mk b/api-tests/tools/makefiles/toolchain.mk
index 699e6bb..9371cb4 100644
--- a/api-tests/tools/makefiles/toolchain.mk
+++ b/api-tests/tools/makefiles/toolchain.mk
@@ -14,7 +14,7 @@
 # * limitations under the License.
 #**/
 
-TOOLCHAIN=GNUARM
+TOOLCHAIN ?= GNUARM
 PREFIX=
 
 #### GNUARM OPTIONS - START ####
@@ -46,6 +46,7 @@ AR_OPTIONS= -rcs
 LINKER_OPTIONS= $(TARGET_SWITCH) -mthumb -Wall -Werror -O0 -fdata-sections \
 				-ffunction-sections -Xlinker --fatal-warnings -Xlinker --gc-sections \
 				-z max-page-size=0x400 -lgcc -lc -lnosys
+HAVE_OBJDUMP=1
 OBJDUMP_OPTIONS= -d
 endif #GNUARM-GCC
 #### GNUARM OPTIONS - END ####
@@ -75,10 +76,31 @@ OBJDUMP=fromelf
 COMPILER_OPTIONS= --target=arm-arm-none-eabi $(TARGET_SWITCH) -Wall -Werror -fshort-enums -fshort-wchar -funsigned-char -fdata-sections -ffunction-sections -mno-unaligned-access -mfpu=none
 AR_OPTIONS= --create -cr
 LINKER_OPTIONS= --strict --map --symbols --xref  --info=summarysizes,sizes,totals,unused,veneers --diag_warning=L6204
+HAVE_OBJDUMP=1
 OBJDUMP_OPTIONS= -c -d --datasymbols
 endif
 #### ARMCLANG OPTIONS - END ####
 
+### ENV OPTIONS - START ####
+ifeq (${TOOLCHAIN}, ENV)
+
+COMPILER := ${CC}
+COMPILER_OPTIONS := ${CFLAGS} -Wall -Werror -Wno-maybe-uninitialized
+
+ASSEMBLER := ${AS}
+ASSEMBLER_OPTIONS := ${ASFLAGS}
+
+LINKER := ${LD}
+LINKER_OPTIONS := ${LDFLAGS}
+
+AR_OPTIONS := ${ARFLAGS}
+
+HAVE_OBJDUMP=0
+
+endif
+### ENV OPTIONS - END ####
+
+
 COMPILER_OPTIONS += -DVERBOSE=$(VERBOSE)
 
 ifeq (${TEST_COMBINE_ARCHIVE}, 1)
@@ -116,4 +138,6 @@ endif
 CC= $(COMPILER) $(COMPILER_OPTIONS) $(CC_OPTIONS) $(USER_INCLUDE) $(INCLUDE)
 AS= $(ASSEMBLER) $(ASSEMBLER_OPTIONS) $(AS_OPTIONS)
 LD= $(LINKER) $(LINKER_OPTIONS)
+ifeq ($(HAVE_OBJDUMP),1)
 DS= $(OBJDUMP) $(OBJDUMP_OPTIONS)
+endif
diff --git a/api-tests/tools/scripts/setup.sh b/api-tests/tools/scripts/setup.sh
index 7d6b36c..d33afd4 100755
--- a/api-tests/tools/scripts/setup.sh
+++ b/api-tests/tools/scripts/setup.sh
@@ -68,9 +68,20 @@ Arguments Info:
                               ipc, crypto, internal_trusted_storage, protected_storage,
                               and initial_attestation.
     --toolchain <TOOLCHAIN> : Build using the given TOOLCHAIN.
-                              Supported values are GNUARM (GNU Arm Embedded) and ARMCLANG (ARM Compiler 6.x).
+                              Supported values are GNUARM (GNU Arm Embedded), ARMCLANG (ARM Compiler 6.x) and ENV.
+                              When set to ENV, the toolchain is specified using the following environment variables:
+                                1. CC - the C compiler (required)
+                                2. CFLAGS - options for the C compiler (optional)
+                                3. LD - the linker (required)
+                                4. LDFLAGS - options for the linker (optional)
+                                5. AS - the assembler (required)
+                                6. ASFLAGS - options for the assembler (optional)
+                                7. AR - the archiver (required)
+                                8. ARFLAGS - options for the archiver (optional)
+                              environment variables, and is expected to be GCC compatible.
     --cpu_arch <CPU_ARCH>   : Provide cpu arch string as argument.
                               Supported CPU arch are armv8m_ml, armv8m_bl and armv7m.
+                              This option must not be used when using the ENV toolchain.
     --verbose <PRINT_LEVEL> : Print verbosity level
                               Supported print levels are:
                                 1 - INFO & above.
@@ -79,7 +90,8 @@ Arguments Info:
                                 4 - WARN & ERROR.
                                 5 - ERROR.
     --archive_tests         : Create combine test archive(.a) file by combining available test objects files.
-                              Absence of this option would create combine test binary(.bin) by combining available test elfs
+                              Absence of this option would create combine test binary(.bin) by combining available test elfs.
+                              Creating a combined test binary(.bin) is only supported when using the GNUARM and ARMCLANG toolchains.
     --include_panic_tests   : Consider panic tests (mentioned in testsuite.db of respective suite) along with functional tests
                               for building the final executables. Absence of this option would consider only non-panic (ie, functional) tests
     --include <INCLUDE_PATH>: Additional directory to be included into compiler search path. Provide --include <path>
@@ -418,27 +430,54 @@ else
    echo "Using \$TOOLCHAIN=$TOOLCHAIN"
 fi
 
-if [ $TOOLCHAIN != "GNUARM" ] && [ $TOOLCHAIN != "ARMCLANG" ]
+if [ $TOOLCHAIN != "GNUARM" ] && [ $TOOLCHAIN != "ARMCLANG" ] && [ $TOOLCHAIN != "ENV" ]
 then
    echo "Error: Unsupported value for --toolchain=$TOOLCHAIN.
-   Supported toolchain are GNUARM and ARMCLANG"
+   Supported toolchain are GNUARM, ARMCLANG and ENV"
    exit 1
 fi
 
-if [ -z "$CPU_ARCH" ]
+if [ $TOOLCHAIN = "ENV" ]
 then
-   echo "Error: Provide cpu arch string as argument using --cpu_arch <string>"
-   echo "Supported CPU arch are armv8m_ml, armv8m_bl, armv7m"
-   exit 1
+    if [ $TEST_COMBINE_ARCHIVE != "1" ]
+    then
+        echo "Error: Creating a combined test .bin is only supported when toolchain is GNUARM or ARMCLANG."
+        exit 1
+    fi
+
+    for envvar in CC LD AS AR
+    do
+        if [ -z "${!envvar}" ]
+        then
+            echo "Error: environment variable ${envvar} must be set when using the ENV toolchain"
+            exit 1
+        else
+            echo "Using ${envvar}=${!envvar}"
+        fi
+    done
+
+    if [ -n "$CPU_ARCH" ]
+    then
+        echo "Error: Cannot use --cpu_arch when using the ENV toolchain"
+        exit 1
+    fi
 else
-   echo "Using \$CPU_ARCH=$CPU_ARCH"
-fi
+    if [ -z "$CPU_ARCH" ]
+    then
+       echo "Error: Provide cpu arch string as argument using --cpu_arch <string>"
+       echo "Supported CPU arch are armv8m_ml, armv8m_bl, armv7m"
+       exit 1
+    elif [ -n "$CPU_ARCH" ]
+    then
+       echo "Using \$CPU_ARCH=$CPU_ARCH"
+    fi
 
-if [ $CPU_ARCH != "armv8m_ml" ] && [ $CPU_ARCH != "armv8m_bl" ] && [ $CPU_ARCH != "armv7m" ]
-then
-   echo "Error: Unsupported value for --cpu_arch=$CPU_ARCH.
-   Supported CPU arch are armv8m_ml, armv8m_bl, armv7m"
-   exit 1
+    if [ $CPU_ARCH != "armv8m_ml" ] && [ $CPU_ARCH != "armv8m_bl" ] && [ $CPU_ARCH != "armv7m" ]
+    then
+       echo "Error: Unsupported value for --cpu_arch=$CPU_ARCH.
+       Supported CPU arch are armv8m_ml, armv8m_bl, armv7m"
+       exit 1
+    fi
 fi
 
 if [ ! -z "$VERBOSE" ]
-- 
2.7.4

